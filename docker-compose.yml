services:
  booking_db_service:
    image: postgres:16
    container_name: booking_db
    ports:
      - "6432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - myNetwork
    volumes:
      - pg-booking-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  booking_cache_service:
    image: redis:7.4
    container_name: booking_cache
    ports:
      - "7379:6379"
    networks:
      - myNetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  booking_migrations_service:
    container_name: 'booking_migrations'
    build:
      context: .
    networks:
      - myNetwork
    env_file:
      - .env
    depends_on:
      booking_db_service:
        condition: service_healthy
      booking_cache_service:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]

  booking_back_service:
    container_name: 'booking_back'
    build:
      context: .
    ports:
      - "7777:8000"
    networks:
      - myNetwork
    env_file:
      - .env
    depends_on:
      booking_migrations_service:
        condition: service_completed_successfully
   
    volumes:
      - shared-images:/app/src/static/images
  booking_nginx:
    image: nginx:latest
    container_name: booking_nginx
    ports:
      - "80:80"
      - "433:433"
    networks:
      - myNetwork
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
    depends_on:
      - booking_back_service  # ждём, пока бэкенд станет доступен
    restart: unless-stopped

  booking_celery_worker_service:
    container_name: 'booking_celery_worker'
    build:
      context: .
    networks:
      - myNetwork
    env_file:
      - .env
    depends_on:
      booking_migrations_service:
        condition: service_completed_successfully
    command: "celery --app=src.tasks.celery_app:celery_instance worker -l INFO"
   
    volumes:
      - shared-images:/app/src/static/images

  booking_celery_beat_service:
    container_name: 'booking_celery_beat'
    build:
      context: .
    networks:
      - myNetwork
    env_file:
      - .env
    depends_on:
      booking_migrations_service:
        condition: service_completed_successfully
    command: "celery --app=src.tasks.celery_app:celery_instance beat -l INFO"

networks:
  myNetwork:
    external: true

volumes:
  pg-booking-data:
  shared-images:
